package view.staff;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.io.IOException;
import java.util.ArrayList;
import java.util.EventObject;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

import controller.customer.ProductInformationPanelController;
import dao.BrandsDao;
import dao.CategoriesDao;
import dao.StocksDao;
import help.ImageAccept;
import model.Products;
import model.Stocks;

@SuppressWarnings("serial")
public class ProductInformationPanel extends JPanel {
	private CustomerFrameView customerFrameView;
	private Products product;
	private byte[] productIcon;

	private JButton btnBack;
	private JButton btnAddToTrunk;
	private JTextField txtProductId;
	private JTextField txtProductName;
	private JTextField txtModelYear;
	private JTextField txtListPrice;
	private JTextField txtQuantity;
	private JComboBox<String> cbbBrand;
	private JComboBox<String> cbbCategory;
	private JComboBox<Integer> cbbStoreId;
	private JLabel lbIcon;
	private JTable table;
	private DefaultTableModel tblModel;
	private JLabel lbStoreId;
	private JLabel lbQuantity;
	private JLabel lbStocks;
	private JScrollPane scrollPane;

	public ProductInformationPanel(CustomerFrameView customerFrameView) {
		this.customerFrameView = customerFrameView;
		initComponent();
		initTable();
		setEvent();
	}

	public void initInformation(Products product) {
		this.product = product;
		if (product.getProductIcon() != null) {
			productIcon = product.getProductIcon();
			try {
				Image img = ImageAccept.createImageFromByteArray(productIcon, "jpg");
				Image resize = ImageAccept.resize(img, 100, 100);
				ImageIcon icon = new ImageIcon(resize);
				lbIcon.setIcon(icon);
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
		txtProductId.setText(String.valueOf(product.getProductId()));
		txtProductName.setText(product.getProductName());
		cbbBrand.setSelectedItem(product.getBrandId());
		cbbCategory.setSelectedItem(product.getCategoryId());
		txtModelYear.setText(String.valueOf(product.getModelYear()));
		txtListPrice.setText(String.valueOf(product.getListPrice()));
		txtQuantity.setText("");

		loadDataToTable();
		loadDataToCombobox();
	}

	private void loadDataToTable() {
		StocksDao dao = new StocksDao();
		ArrayList<Stocks> result = dao.findAllStookHasProduct(product);
		tblModel.setRowCount(0);
		for (Stocks stock : result) {
			tblModel.addRow(new Object[] { stock.getStoreId(), stock.getQuantity() });
		}
	}

	private void setEvent() {
		ProductInformationPanelController controller = new ProductInformationPanelController(this);
		btnBack.addActionListener(controller);
		btnAddToTrunk.addActionListener(controller);
	}

	private void initTable() {
		tblModel = new DefaultTableModel();
		tblModel.setColumnIdentifiers(new String[] { "Store ID", "Quantity" });
		table.setModel(tblModel);
	}

	private void initComponent() {
		// component
		// label
		Font font = new Font("Arial", Font.PLAIN, 16);
		JLabel lbProductId = new JLabel("Product ID");
		lbProductId.setFont(font);
		JLabel lbProductName = new JLabel("Product Name");
		lbProductName.setFont(font);
		JLabel lbBrand = new JLabel("Brand Name");
		lbBrand.setFont(font);
		JLabel lbCategory = new JLabel("Category Name");
		lbCategory.setFont(font);
		JLabel lbModelYear = new JLabel("Model Year");
		lbModelYear.setFont(font);
		JLabel lbListPrice = new JLabel("List Price");
		lbListPrice.setFont(font);
		lbIcon = new JLabel(new ImageIcon(getClass().getResource("/icon/Bicycle-icon72.png")));
		lbIcon.setBorder(new LineBorder(Color.CYAN));
		lbIcon.setPreferredSize(new Dimension(100, 100));
		lbStocks = new JLabel("Stocks");
		lbStocks.setFont(font);
		lbStoreId = new JLabel("Store ID");
		lbStoreId.setFont(font);
		lbQuantity = new JLabel("Quantity");
		lbQuantity.setFont(font);
		// textfield
		txtProductId = new JTextField(10);
		txtProductId.setFont(font);
		txtProductName = new JTextField(10);
		txtProductName.setFont(font);
		txtModelYear = new JTextField(10);
		txtModelYear.setFont(font);
		txtListPrice = new JTextField(10);
		txtListPrice.setFont(font);
		txtQuantity = new JTextField(10);
		txtQuantity.setFont(font);

		// button

		btnAddToTrunk = new JButton("Add to Trunk", new ImageIcon(getClass().getResource("/icon/truck-icon16.png")));
		btnAddToTrunk.setFont(font);
		btnBack = new JButton("Back", new ImageIcon(getClass().getResource("/icon/Go-back-icon16.png")));
		btnBack.setFont(font);
		// combobox
		cbbBrand = new JComboBox<String>();
		cbbBrand.setFont(font);
		cbbCategory = new JComboBox<String>();
		cbbCategory.setFont(font);
		cbbStoreId = new JComboBox<Integer>();
		cbbStoreId.setFont(font);
		// table
		table = new JTable() {
			public boolean editCellAt(int row, int column, EventObject e) {
				return false;
			}
		};
		table.setPreferredScrollableViewportSize(new Dimension(200, 150));
		table.setAutoCreateRowSorter(true);
		table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
		table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		scrollPane = new JScrollPane(table, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		// component status
		txtProductId.setEditable(false);
		txtProductName.setEditable(false);
		cbbBrand.setEnabled(false);
		cbbCategory.setEnabled(false);
		txtModelYear.setEditable(false);
		txtListPrice.setEditable(false);
		// layout
		setLayout(new GridBagLayout());
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.weighty = 1;
		gbc.insets = new Insets(5, 5, 5, 5);

		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		add(lbProductId, gbc);

		gbc.gridy++;
		add(lbProductName, gbc);

		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.weightx = 1;
		add(txtProductId, gbc);

		gbc.gridy++;
		add(txtProductName, gbc);

		gbc.gridx = 2;
		gbc.gridy = 0;
		gbc.gridheight = 2;
		gbc.gridwidth = 2;
		gbc.anchor = GridBagConstraints.CENTER;
		gbc.fill = GridBagConstraints.NONE;
		add(lbIcon, gbc);

		gbc.gridx = 0;
		gbc.gridy = 2;
		gbc.gridwidth = 1;
		gbc.gridheight = 1;
		gbc.weightx = 0;
		gbc.anchor = GridBagConstraints.WEST;
		add(lbBrand, gbc);

		gbc.gridx += 2;
		add(lbCategory, gbc);

		gbc.gridx -= 2;
		gbc.gridy++;
		add(lbModelYear, gbc);

		gbc.gridx += 2;
		add(lbListPrice, gbc);

		gbc.gridx = 1;
		gbc.gridy = 2;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		add(cbbBrand, gbc);

		gbc.gridy++;
		add(txtModelYear, gbc);

		gbc.gridy--;
		gbc.gridx = 3;
		gbc.weightx = 1;
		add(cbbCategory, gbc);

		gbc.gridy++;
		add(txtListPrice, gbc);

		gbc.gridy++;
		gbc.gridx = 0;
		gbc.fill = GridBagConstraints.NONE;
		add(lbStocks, gbc);

		gbc.gridx = 0;
		gbc.gridy++;
		gbc.anchor = GridBagConstraints.CENTER;
		gbc.gridwidth = 2;
		gbc.gridheight = 3;
		add(scrollPane, gbc);

		gbc.gridx = 2;
		gbc.gridheight = 1;
		gbc.gridwidth = 1;
		gbc.anchor = GridBagConstraints.WEST;
		add(lbStoreId, gbc);

		gbc.gridx++;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		add(cbbStoreId, gbc);

		gbc.gridx = 2;
		gbc.gridy++;
		gbc.fill = GridBagConstraints.NONE;
		add(lbQuantity, gbc);

		gbc.gridx++;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		add(txtQuantity, gbc);

		gbc.gridy++;
		gbc.gridx = 2;
		gbc.fill = GridBagConstraints.NONE;
		gbc.anchor = GridBagConstraints.CENTER;
		gbc.gridwidth = 2;
		add(btnAddToTrunk, gbc);

		gbc.gridy++;
		gbc.gridwidth = 1;
		gbc.anchor = GridBagConstraints.WEST;
		gbc.gridx = 0;
		add(btnBack, gbc);

	}

	private void loadDataToCombobox() {
		cbbBrand.removeAllItems();
		cbbCategory.removeAllItems();
		cbbStoreId.removeAllItems();

		BrandsDao brandsDao = new BrandsDao();
		ArrayList<String> result = brandsDao.allName();
		for (String element : result) {
			cbbBrand.addItem(element);
		}
		CategoriesDao categoriesDao = new CategoriesDao();
		result = categoriesDao.allName();
		for (String element : result) {
			cbbCategory.addItem(element);
		}
		StocksDao stocksDao = new StocksDao();
		ArrayList<Stocks> result2 = stocksDao.findAllStookHasProduct(product);
		for (Stocks stock : result2) {
			cbbStoreId.addItem(stock.getStoreId());
		}
	}

	public Products getProduct() {
		return product;
	}

	public void setProduct(Products product) {
		this.product = product;
	}

	public byte[] getProductIcon() {
		return productIcon;
	}

	public void setProductIcon(byte[] productIcon) {
		this.productIcon = productIcon;
	}

	public JButton getBtnBack() {
		return btnBack;
	}

	public JButton getBtnAddToTrunk() {
		return btnAddToTrunk;
	}

	public JTextField getTxtProductId() {
		return txtProductId;
	}

	public JTextField getTxtProductName() {
		return txtProductName;
	}

	public JTextField getTxtModelYear() {
		return txtModelYear;
	}

	public JTextField getTxtListPrice() {
		return txtListPrice;
	}

	public JTextField getTxtQuantity() {
		return txtQuantity;
	}

	public JComboBox<String> getCbbBrand() {
		return cbbBrand;
	}

	public JComboBox<String> getCbbCategory() {
		return cbbCategory;
	}

	public JComboBox<Integer> getCbbStoreId() {
		return cbbStoreId;
	}

	public JLabel getLbIcon() {
		return lbIcon;
	}

	public JTable getTable() {
		return table;
	}

	public DefaultTableModel getTblModel() {
		return tblModel;
	}

	public JLabel getLbStoreId() {
		return lbStoreId;
	}

	public JLabel getLbQuantity() {
		return lbQuantity;
	}

	public JLabel getLbStocks() {
		return lbStocks;
	}

	public JScrollPane getScrollPane() {
		return scrollPane;
	}

	public CustomerFrameView getCustomerFrameView() {
		return customerFrameView;
	}

}
