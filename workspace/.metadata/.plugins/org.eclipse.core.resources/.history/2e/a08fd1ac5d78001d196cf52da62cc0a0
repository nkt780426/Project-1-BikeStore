package view.admin.table;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import controller.admin.ProductsTableController;
import dao.ProductsDao;
import model.Products;
import view.admin.AdminFrameView;

@SuppressWarnings("serial")
public class ProductsTable extends JPanel {
	private AdminFrameView adminFrameView;
	private JTable table;
	private JButton btnNew;
	private JButton btnDelete;
	private ArrayList<Products> data;
	private DefaultTableModel tblModel;
	private JTextField txtFilter;
	private JButton btnOK;

	public ProductsTable(AdminFrameView adminFrameView) {
		this.adminFrameView = adminFrameView;
		initComponent();
		initTable();
		loadDataToTable();
	}

	private void initComponent() {
		// component
		Font font = new Font("Arial", Font.PLAIN, 16);
		// Filter

		JLabel lbFilter = new JLabel("FILTER");
		lbFilter.setFont(font);

		txtFilter = new JTextField();
		txtFilter.setFont(font);

		btnOK = new JButton("OK", new ImageIcon(getClass().getResource("/icon/Zoom-icon16.png")));
		btnOK.setFont(font);

		// table
		table = new JTable();
		table.setAutoCreateRowSorter(true);
		table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
		JScrollPane scrollPane = new JScrollPane(table, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
				JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

		// btn
		btnNew = new JButton("New", new ImageIcon(getClass().getResource("/icon/new-icon16.png")));
		btnNew.setFont(font);
		btnDelete = new JButton("Delete", new ImageIcon(getClass().getResource("/icon/Button-Close-icon16.png")));
		btnDelete.setFont(font);
		// layout
		setLayout(new BorderLayout());
		// Page_Start
		JPanel panelSearch = new JPanel();
		panelSearch.setLayout(new GridBagLayout());
		GridBagConstraints gbc = new GridBagConstraints();
		gbc.insets = new Insets(5, 5, 5, 5);
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		panelSearch.add(lbFilter, gbc);

		gbc.gridx++;
		gbc.weightx = 1;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panelSearch.add(txtFilter, gbc);

		gbc.gridx++;
		gbc.weightx = 0;
		gbc.fill = GridBagConstraints.NONE;
		panelSearch.add(btnOK, gbc);
		add(panelSearch, BorderLayout.PAGE_START);
		// Center
		add(scrollPane, BorderLayout.CENTER);
		// Page_end
		JPanel panelButton = new JPanel();
		panelButton.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));
		panelButton.add(btnNew);
		panelButton.add(btnDelete);
		add(panelButton, BorderLayout.PAGE_END);
		// Event
		ProductsTableController productsTableController = new ProductsTableController(this, this.adminFrameView);
		btnOK.addActionListener(productsTableController);
		btnNew.addActionListener(productsTableController);
	}

	private void initTable() {
		tblModel = new DefaultTableModel();
		tblModel.setColumnIdentifiers(
				new String[] { "Product ID", "Name", "Brand Id", "Category ID", "Model Year", "List Price" });
		table.setModel(tblModel);
	}

	public void loadDataToTable() {
		ProductsDao productsDao = new ProductsDao();
		data = productsDao.selectAll();
		tblModel.setRowCount(0);
		for (Products product : data) {
			tblModel.addRow(new Object[] { product.getProductId(), product.getProductName(), product.getBrandId(),
					product.getCategoryId(), product.getModelYear(), product.getListPrice() });
		}
	}

	public void sortAndFilter(String target) {
		TableRowSorter<TableModel> sorter = new TableRowSorter<>(tblModel);
		table.setRowSorter(sorter);
		List<RowFilter<Object, Object>> filters = new ArrayList<RowFilter<Object, Object>>(2);
		filters.add(RowFilter.regexFilter(target, 0));
		filters.add(RowFilter.regexFilter(target, 1));
		RowFilter rf = RowFilter.andFilter(filters);
		sorter.setRowFilter(rf);
	}

	public AdminFrameView getAdminFrameView() {
		return adminFrameView;
	}

	public void setAdminFrameView(AdminFrameView adminFrameView) {
		this.adminFrameView = adminFrameView;
	}

	public JTable getTable() {
		return table;
	}

	public void setTable(JTable table) {
		this.table = table;
	}

	public ArrayList<Products> getData() {
		return data;
	}

	public void setData(ArrayList<Products> data) {
		this.data = data;
	}

	public DefaultTableModel getTblModel() {
		return tblModel;
	}

	public void setTblModel(DefaultTableModel tblModel) {
		this.tblModel = tblModel;
	}

	public JTextField getTxtFilter() {
		return txtFilter;
	}

	public void setTxtFilter(JTextField txtFilter) {
		this.txtFilter = txtFilter;
	}

	public JButton getBtnNew() {
		return btnNew;
	}

	public JButton getBtnDelete() {
		return btnDelete;
	}

	public JButton getBtnOK() {
		return btnOK;
	}

}
