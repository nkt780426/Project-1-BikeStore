package dao;

import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.sql.rowset.serial.SerialBlob;

import db_connection.JDBCUtil;
import model.Stores;

public class StoresDao {

	public int insert(Stores store) {
		int ketQua = 0;
		Connection connection = JDBCUtil.getConnection();
		try {
			String sql = "INSERT INTO sales.stores (storeName, phone, email, address, storeIcon) "
					+ "OUTPUT inserted.storeId " + "VALUES (?,?,?,?,?)";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, store.getStoreName());
			preparedStatement.setString(2, store.getPhone());
			preparedStatement.setString(3, store.getEmail());
			preparedStatement.setString(4, store.getAddress());
			if (store.getStoreIcon() != null) {
				preparedStatement.setBlob(5, new SerialBlob(store.getStoreIcon()));
			} else {
				preparedStatement.setBlob(5, (Blob) null);
			}
			ResultSet rs = preparedStatement.executeQuery();
			while (rs.next()) {
				ketQua++;
				store.setStoreId(rs.getInt("storeId"));
			}
			preparedStatement.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		JDBCUtil.closeConnection(connection);
		return ketQua;
	}

	public int update(Stores store) {
		int ketQua = 0;
		Connection connection = JDBCUtil.getConnection();
		try {
			String sql = "UPDATE sales.stores " + "SET storeName =?, phone =?, email = ?, address = ?, storeIcon = ? "
					+ " WHERE storeId= ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, store.getStoreName());
			preparedStatement.setString(2, store.getPhone());
			preparedStatement.setString(3, store.getEmail());
			preparedStatement.setString(4, store.getAddress());
			preparedStatement.setInt(5, store.getStoreId());
			if (store.getStoreIcon() != null) {
				preparedStatement.setBlob(6, new SerialBlob(store.getStoreIcon()));
			} else {
				preparedStatement.setBlob(6, (Blob) null);
			}
			ketQua = preparedStatement.executeUpdate();
			preparedStatement.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		JDBCUtil.closeConnection(connection);
		return ketQua;

	}

	public int delete(Stores store) {
		int ketQua = 0;
		Connection connection = JDBCUtil.getConnection();
		try {
			String sql = "DELETE FROM sales.stores WHERE storeId= ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, store.getStoreId());
			ketQua = preparedStatement.executeUpdate();
			preparedStatement.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		JDBCUtil.closeConnection(connection);
		return ketQua;

	}

	public ArrayList<Stores> selectAll() {
		ArrayList<Stores> ketQua = new ArrayList<Stores>();
		Connection connection = JDBCUtil.getConnection();
		try {
			String sql = "SELECT*FROM sales.stores";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet rs = preparedStatement.executeQuery();
			while (rs.next()) {
				Stores store = new Stores();
				store.setStoreId(rs.getInt("storeId"));
				store.setStoreName(rs.getString("storeName"));
				store.setPhone(rs.getString("phone"));
				store.setEmail(rs.getString("email"));
				store.setAddress(rs.getString("address"));
				Blob storeIcon = rs.getBlob("storeIcon");
				if (storeIcon != null) {
					store.setStoreIcon(storeIcon.getBytes(1, (int) storeIcon.length()));
				}
				ketQua.add(store);
			}
			preparedStatement.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		JDBCUtil.closeConnection(connection);
		return ketQua;
	}

	public boolean findById(Stores store) {
		Connection connection = JDBCUtil.getConnection();
		try {
			String sql = "SELECT*FROM sales.stores WHERE storeId=?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, store.getStoreId());
			ResultSet rs = preparedStatement.executeQuery();
			while (rs.next()) {
				store.setStoreId(rs.getInt("storeId"));
				store.setStoreName(rs.getString("storeName"));
				store.setPhone(rs.getString("phone"));
				store.setEmail(rs.getString("email"));
				store.setAddress(rs.getString("address"));
				Blob storeIcon = rs.getBlob("storeIcon");
				if (storeIcon != null) {
					store.setStoreIcon(storeIcon.getBytes(1, (int) storeIcon.length()));
				}
				return true;
			}
			preparedStatement.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		JDBCUtil.closeConnection(connection);
		return false;
	}

	public boolean findByName(Stores store) {
		Connection connection = JDBCUtil.getConnection();
		try {
			String sql = "SELECT*FROM sales.stores WHERE storeName=?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, store.getStoreName());
			ResultSet rs = preparedStatement.executeQuery();
			while (rs.next()) {
				store.setStoreId(rs.getInt("storeId"));
				store.setPhone(rs.getString("phone"));
				store.setEmail(rs.getString("email"));
				store.setAddress(rs.getString("address"));
				Blob storeIcon = rs.getBlob("storeIcon");
				if (storeIcon != null) {
					store.setStoreIcon(storeIcon.getBytes(1, (int) storeIcon.length()));
				}
				return true;
			}
			preparedStatement.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		JDBCUtil.closeConnection(connection);
		return false;
	}

	public ArrayList<Integer> allId() {
		ArrayList<Integer> result = new ArrayList<Integer>();
		Connection connection = JDBCUtil.getConnection();
		try {
			String sql = "SELECT storeId FROM sales.stores";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet rs = preparedStatement.executeQuery();
			while (rs.next()) {
				result.add(rs.getInt("storeId"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		JDBCUtil.closeConnection(connection);
		return result;
	}
}
